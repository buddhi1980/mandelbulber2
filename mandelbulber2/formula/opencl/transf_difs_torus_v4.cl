/**
 * Mandelbulber v2, a 3D fractal generator  _%}}i*<.        ____                _______
 * Copyright (C) 2021 Mandelbulber Team   _>]|=||i=i<,     / __ \___  ___ ___  / ___/ /
 *                                        \><||i|=>>%)    / /_/ / _ \/ -_) _ \/ /__/ /__
 * This file is part of Mandelbulber.     )<=i=]=|=i<>    \____/ .__/\__/_//_/\___/____/
 * The project is licensed under GPLv3,   -<>>=|><|||`        /_/
 * see also COPYING file in this folder.    ~+{i%+++
 *
 * http://www.iquilezles.org/www/articles/distfunctions/distfunctions.htm

 * This file has been autogenerated by tools/populateUiInformation.php
 * from the file "fractal_transf_difs_torus.cpp" in the folder formula/definition
 * D O    N O T    E D I T    T H I S    F I L E !
 */

REAL4 TransfDIFSTorusV4Iteration(REAL4 z, __constant sFractalCl *fractal, sExtendedAuxCl *aux)
{
	REAL temp;

	z *= fractal->transformCommon.scale1;
	aux->DE = aux->DE * fabs(fractal->transformCommon.scale1);

	if (aux->i >= fractal->transformCommon.startIterationsM
			&& aux->i < fractal->transformCommon.stopIterationsM)
	{
		if (fractal->transformCommon.functionEnabledGFalse)
		{
			if (fractal->transformCommon.functionEnabledAxFalse) z.x = fabs(z.x);
			if (fractal->transformCommon.functionEnabledAyFalse) z.y = fabs(z.y);
			if (fractal->transformCommon.functionEnabledAzFalse) z.z = fabs(z.z);
		}
		z = z - fractal->transformCommon.offset000;
	}

	if (fractal->transformCommon.functionEnabledRFalse
			&& aux->i >= fractal->transformCommon.startIterationsR
			&& aux->i < fractal->transformCommon.stopIterationsR)
	{
		z = Matrix33MulFloat4(fractal->transformCommon.rotationMatrix, z);
	}

	if (fractal->transformCommon.angleDegA != 0.0f)
	{
		REAL s = fractal->transformCommon.sinA;
		REAL c = fractal->transformCommon.cosA;
		temp = z.x;
		z.x = z.x * c + z.y * -s;
		z.y = temp * s + z.y * c;

		z.x = fabs(z.x);
		temp = z.x;
		z.x = z.x * c + z.y * -s;
		z.y = temp * s + z.y * c;
	}

	// swap axis
/*	if (fractal->transformCommon.functionEnabledSwFalse)
	{
		temp = z.x;
		z.x = z.z;
		z.z = temp;
	}
	if (fractal->transformCommon.functionEnabledSFalse)
	{
		temp = z.x;
		z.x = z.z;
		z.z = temp;
	}*/

	REAL T1 = native_sqrt(z.y * z.y + z.x * z.x) - fractal->transformCommon.radius1;

	if (!fractal->transformCommon.functionEnabledCFalse)
		temp = -fractal->transformCommon.offset02;
	else
		temp = fractal->transformCommon.offset0005 - fractal->transformCommon.offset02;

	if (!fractal->transformCommon.functionEnabledJFalse)
		T1 = native_sqrt(T1 * T1 + z.z * z.z) + temp;
	else
		T1 = max(fabs(T1), fabs(z.z)) + temp;
	temp = T1;
	if (fractal->transformCommon.functionEnabledCFalse)
	{
		T1 = max(fabs(T1) - fractal->transformCommon.offset0005, 0.0f);
	}
	REAL torD = max(T1, -z.y);

	REAL colDist = aux->dist;
	aux->dist = min(aux->dist, torD / (aux->DE + fractal->analyticDE.offset0));

	if (fractal->foldColor.auxColorEnabledFalse && colDist != aux->dist
			&& aux->i >= fractal->foldColor.startIterationsA
			&& aux->i < fractal->foldColor.stopIterationsA)
	{
		REAL addCol = fractal->foldColor.difs0000.x;
		if (T1 >= temp + fractal->transformCommon.offset0005)
			addCol = fractal->foldColor.difs0000.z;
		if (torD == -z.y) addCol = fractal->foldColor.difs0000.y;
		aux->color = addCol;
	}
	return z;
}
