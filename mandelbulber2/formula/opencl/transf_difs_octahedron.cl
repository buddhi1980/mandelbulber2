/**
 * Mandelbulber v2, a 3D fractal generator  _%}}i*<.        ____                _______
 * Copyright (C) 2021 Mandelbulber Team   _>]|=||i=i<,     / __ \___  ___ ___  / ___/ /
 *                                        \><||i|=>>%)    / /_/ / _ \/ -_) _ \/ /__/ /__
 * This file is part of Mandelbulber.     )<=i=]=|=i<>    \____/ .__/\__/_//_/\___/____/
 * The project is licensed under GPLv3,   -<>>=|><|||`        /_/
 * see also COPYING file in this folder.    ~+{i%+++
 *
 * TransfDifsCylinderIteration  fragmentarium code, mdifs by knighty (jan 2012)
 * and http://www.iquilezles.org/www/articles/distfunctions/distfunctions.htm

 * This file has been autogenerated by tools/populateUiInformation.php
 * from the file "fractal_transf_difs_cylinder.cpp" in the folder formula/definition
 * D O    N O T    E D I T    T H I S    F I L E !
 */

REAL4 TransfDIFSOctahedronIteration(REAL4 z, __constant sFractalCl *fractal, sExtendedAuxCl *aux)
{
	REAL t = 0.0f;
	z *= fractal->transformCommon.scaleA1;
	aux->DE *= fractal->transformCommon.scaleA1;

	z = fabs(z);

	REAL m = 0.0f;
	if (!fractal->transformCommon.functionEnabledAFalse)
	{
		m = (z.x + z.y + z.z - fractal->transformCommon.offset1) * FRAC_1_3;
	}
	else
	{
		z -= fractal->transformCommon.offset000;
		m = (z.x + z.y + z.z - fractal->transformCommon.offset1) * FRAC_1_3;
		m = m * m * fractal->transformCommon.scale1;
	}

	REAL4 o = z - (REAL4){m, m, m, 0.0f};

	REAL4 k = z;
	k.x = min(o.x, 0.0f);
	k.y = min(o.y, 0.0f);
	k.z = min(o.z, 0.0f);

	t = (k.x + k.y + k.z) * 0.5f;
	o = o + (REAL4){t, t, t, 0.0f}; // - k * fractal->transformCommon.scale015;

	if (!fractal->transformCommon.functionEnabledAFalse)
		t  = fractal->transformCommon.offset1;
	else
		t = fractal->transformCommon.offsetA1;

	o.x = clamp(o.x, 0.0f, t);
	o.y = clamp(o.y, 0.0f, t);
	o.z = clamp(o.z, 0.0f, t);

	REAL4 v = z - o;
	t = dot(v,v);
	REAL v2Rsqrt = t / sqrt(t);
	REAL zcd =  v2Rsqrt * sign(m) - fractal->transformCommon.offset0;

	if (fractal->analyticDE.enabledFalse)
		aux->DE = aux->DE * fractal->analyticDE.scale1 + fractal->analyticDE.offset0;

	REAL colDist = aux->dist;
	aux->dist = min(aux->dist, zcd / aux->DE);

	if (fractal->foldColor.auxColorEnabledFalse && aux->i >= fractal->foldColor.startIterationsA
			&& aux->i < fractal->foldColor.stopIterationsA)
	{
		if (colDist != aux->dist) aux->color += fractal->foldColor.difs0000.x;
	}
	return z;
}
