/**
 * Mandelbulber v2, a 3D fractal generator  _%}}i*<.        ____                _______
 * Copyright (C) 2024 Mandelbulber Team   _>]|=||i=i<,     / __ \___  ___ ___  / ___/ /
 *                                        \><||i|=>>%)    / /_/ / _ \/ -_) _ \/ /__/ /__
 * This file is part of Mandelbulber.     )<=i=]=|=i<>    \____/ .__/\__/_//_/\___/____/
 * The project is licensed under GPLv3,   -<>>=|><|||`        /_/
 * see also COPYING file in this folder.    ~+{i%+++
 *
 * KochV2Iteration
 * Based on Knighty's Kaleidoscopic IFS 3D Fractals, described here:
 * http://www.fractalforums.com/3d-fractal-generation/kaleidoscopic-%28escape-time-ifs%29/

 * This file has been autogenerated by tools/populateUiInformation.php
 * from the file "fractal_koch_v4.cpp" in the folder formula/definition
 * D O    N O T    E D I T    T H I S    F I L E !
 */

REAL4 KochV5Iteration(REAL4 z, __constant sFractalCl *fractal, sExtendedAuxCl *aux)
{
	REAL temp = 0.0f;
	REAL colAdd = 0.0f;
	if (fractal->transformCommon.functionEnabledAx
		&& aux->i >= fractal->transformCommon.startIterationsCx
		&& aux->i < fractal->transformCommon.stopIterationsCx)
			z.x = fabs(z.x);
	if (fractal->transformCommon.functionEnabledAy
		&& aux->i >= fractal->transformCommon.startIterationsCy
		&& aux->i < fractal->transformCommon.stopIterationsCy)
			z.y = fabs(z.y);
	if (fractal->transformCommon.functionEnabledAzFalse
		&& aux->i >= fractal->transformCommon.startIterationsCz
		&& aux->i < fractal->transformCommon.stopIterationsCz)
			z.z = fabs(z.z);

	if (fractal->transformCommon.functionEnabledCx
			&& aux->i >= fractal->transformCommon.startIterationsD
			&& aux->i < fractal->transformCommon.stopIterationsD)
	{
		if (z.y > z.x)
		{
			temp = z.x;
			z.x = z.y;
			z.y = temp;
			colAdd += fractal->foldColor.difs0000.x;
		}
	}

	if (fractal->transformCommon.functionEnabledCFalse
			&& aux->i >= fractal->transformCommon.startIterationsC
			&& aux->i < fractal->transformCommon.stopIterationsC)
	{
		z = z - fractal->transformCommon.offsetA000;
	}

	// folds
	if (fractal->transformCommon.functionEnabledFalse
			&& aux->i >= fractal->transformCommon.startIterations
			&& aux->i < fractal->transformCommon.stopIterations)
	{
		// diagonal2
		if (fractal->transformCommon.functionEnabledCxFalse)
			if (z.x > z.y)
			{
				REAL temp = z.x;
				z.x = z.y;
				z.y = temp;
			}
		// polyfold
		if (fractal->transformCommon.functionEnabledPFalse)
		{
			z.x = fabs(z.x);
			REAL psi = M_PI_F / fractal->transformCommon.int8X;
			psi = fabs(fmod(atan2(z.y, z.x) + psi, 2.0f * psi) - psi);
			REAL len = native_sqrt(z.x * z.x + z.y * z.y);
			z.x = native_cos(psi) * len;
			z.y = native_sin(psi) * len;
		}
		// abs offsets
		if (fractal->transformCommon.functionEnabledMFalse)
		{
			REAL xOffset = fractal->transformCommon.offsetC0;
			if (z.x < xOffset) z.x = fabs(z.x - xOffset) + xOffset;
		}
		if (fractal->transformCommon.functionEnabledDFalse)
		{
			REAL yOffset = fractal->transformCommon.offsetD0;
			if (z.y < yOffset) z.y = fabs(z.y - yOffset) + yOffset;
		}
	}

	if (fractal->transformCommon.functionEnabledGFalse
			&& aux->i >= fractal->transformCommon.startIterationsG
			&& aux->i < fractal->transformCommon.stopIterationsG)
	{
		z += fractal->mandelbox.offset;
		REAL rr = dot(z, z);

		if (rr < fractal->transformCommon.minR0)
		{
			z *= fractal->transformCommon.maxMinR0factor;
			aux->DE *= fractal->transformCommon.maxMinR0factor;
		}
		else if (rr < fractal->transformCommon.maxR2d1)
		{
			REAL tglad_factor2 = fractal->transformCommon.maxR2d1 / rr;
			z *= tglad_factor2;
			aux->DE *= tglad_factor2;
		}
		z -= fractal->mandelbox.offset;
	}

	REAL YOff = FRAC_1_3_F * fractal->transformCommon.scale1;
	z.y = YOff - fabs(z.y - YOff);

	REAL third = FRAC_1_3_F;
	if (fractal->transformCommon.functionEnabledNFalse)
		third = -FRAC_1_3_F;

	if (fractal->transformCommon.functionEnabledAFalse
			&& aux->i >= fractal->transformCommon.startIterationsA
			&& aux->i < fractal->transformCommon.stopIterationsA)
	{
		z.x += third;
		if (z.z > z.x)
		{
			temp = z.x;
			z.x = z.z;
			z.z = temp;
			colAdd += fractal->foldColor.difs0000.y;
		}
		z.x -= third;
	}

	if (fractal->transformCommon.functionEnabledBFalse
			&& aux->i >= fractal->transformCommon.startIterationsB
			&& aux->i < fractal->transformCommon.stopIterationsB)
	{
		z.x -= third;
		if (z.z > z.x)
		{
			temp = z.x;
			z.x = z.z;
			z.z = temp;
			colAdd += fractal->foldColor.difs0000.z;
		}
		z.x += third;
	}

	if (aux->i >= fractal->transformCommon.startIterationsP
			&& aux->i < fractal->transformCommon.stopIterationsP)
			z = z - fractal->transformCommon.offset100;

	REAL4 Offset = fractal->transformCommon.additionConstantNeg100;
	z -= Offset;
	REAL useScale = fractal->transformCommon.scale2;
	if (fractal->transformCommon.functionEnabledKFalse)
	{
		useScale += aux->actualScaleA;
		// update actualScale for next iteration
		REAL vary = fractal->transformCommon.scaleVary0
								* (fabs(aux->actualScaleA) - fractal->transformCommon.scaleC1);
		aux->actualScaleA = -vary;
	}
	aux->DE = aux->DE * fabs(useScale) + fractal->analyticDE.offset0;
	z *= useScale;

	if (fractal->transformCommon.functionEnabledHFalse
			&& aux->i >= fractal->transformCommon.startIterationsH
			&& aux->i < fractal->transformCommon.stopIterationsH)
		z.z = -z.z;

	// rotation
	if (fractal->transformCommon.functionEnabledRFalse
			&& aux->i >= fractal->transformCommon.startIterationsR
			&& aux->i < fractal->transformCommon.stopIterationsR)
	{
		z = Matrix33MulFloat4(fractal->transformCommon.rotationMatrix, z);
	}
	z += Offset;

	// aux->dist
	if (fractal->transformCommon.functionEnabled)
	{
		REAL4 zc = z;
		REAL4 c = aux->const_c;
		REAL d;
		// shape
		if (!fractal->transformCommon.functionEnabledFFalse
				&& aux->i >= fractal->transformCommon.startIterationsO
				&& aux->i < fractal->transformCommon.stopIterationsO)
		{
			REAL a = fractal->transformCommon.offsetA0; // cubes
			if (!fractal->transformCommon.functionEnabledFFalse)
			{
				a = fractal->transformCommon.offsetA0;
			}
			else
			{
				a = fractal->transformCommon.offsetA0
						/ (aux->i + 1) * fractal->transformCommon.scaleA1;
			}

			REAL4 b = fabs(zc) - (REAL4){a, a, a, 0.0f};
			d = max(b.x, max(b.y, b.z));
		}
		else
		{
			if (!fractal->transformCommon.functionEnabledFFalse)
			{
				d = fabs(length(zc) - fractal->transformCommon.offset0);
			}
			else
			{
				d = fabs(length(zc) - fractal->transformCommon.offset0
						 / (aux->i + 1) * fractal->transformCommon.scaleA1);
			}
		}

		// offset
		if (fractal->transformCommon.functionEnabledOFalse) d -= length(Offset);

		// plane
		if (fractal->transformCommon.functionEnabledSFalse)
		{
			REAL g = fabs(zc.z - fractal->transformCommon.offsetR0) - fractal->transformCommon.offsetF0;
			d = min(g, d);
		}

		// clip
		if (fractal->transformCommon.functionEnabledTFalse
				&& aux->i >= fractal->transformCommon.startIterationsJ
				&& aux->i < fractal->transformCommon.stopIterationsJ)
		{
			REAL e = fractal->transformCommon.offset2;

			if (!fractal->transformCommon.functionEnabledEFalse)
			{
				c.z -= fractal->transformCommon.offsetB0;
				REAL4 f = fabs(c) - (REAL4){e, e, e, 0.0f};
				if (!fractal->transformCommon.functionEnabledIFalse)
					e = max(f.x, f.y); // sq
				else
					e = max(f.x, max(f.y, f.z)); // box
			}
			else
			{
				c.z -= fractal->transformCommon.offsetB0;
				if (!fractal->transformCommon.functionEnabledIFalse)
					e = clamp(native_sqrt(c.x * c.x + c.y * c.y) - e, 0.0f, 100.0f); // circle
				else
					e = clamp(length(c) - e, 0.0f, 100.0f); // sphere
			}
			d = max(d, e);
		}

		d = d / aux->DE;

		// aux->dist = d;
		aux->dist = min(d, aux->dist);
	}

	// aux->color
	if (fractal->foldColor.auxColorEnabledFalse && aux->i >= fractal->foldColor.startIterationsA
			&& aux->i < fractal->foldColor.stopIterationsA)
	{
		aux->color += colAdd + fractal->foldColor.difs0000.w;
	}

	return z;
}
