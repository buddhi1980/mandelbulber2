/**
 * Mandelbulber v2, a 3D fractal generator  _%}}i*<.        ____                _______
 * Copyright (C) 2020 Mandelbulber Team   _>]|=||i=i<,     / __ \___  ___ ___  / ___/ /
 *                                        \><||i|=>>%)    / /_/ / _ \/ -_) _ \/ /__/ /__
 * This file is part of Mandelbulber.     )<=i=]=|=i<>    \____/ .__/\__/_//_/\___/____/
 * The project is licensed under GPLv3,   -<>>=|><|||`        /_/
 * see also COPYING file in this folder.    ~+{i%+++
 *
 * spherical invert (modes updated v2.15)
 * from M3D. Formula by Luca GN 2011, updated May 2012.
 * @reference
 * http://www.fractalforums.com/mandelbulb-3d/custom-formulas-and-transforms-release-t17106/

 * This file has been autogenerated by tools/populateUiInformation.php
 * from the file "fractal_transf_spherical_inv.cpp" in the folder formula/definition
 * D O    N O T    E D I T    T H I S    F I L E !
 */

REAL4 TransfSphericalInvIteration(REAL4 z, __constant sFractalCl *fractal, sExtendedAuxCl *aux)
{
	REAL4 oldZ = z;
	REAL RR = 1.0f;
	z += fractal->mandelbox.offset;
	z *= fractal->transformCommon.scale;
	aux->DE = aux->DE * fabs(fractal->transformCommon.scale) + 1.0f;

	if (!fractal->transformCommon.functionEnabledyFalse) RR = dot(z, z);
		else RR = dot(oldZ, oldZ);

	if (!fractal->transformCommon.functionEnabledzFalse)
	{
		RR = 1.0f / RR;
		z *= RR;
		aux->DE *= RR;
	}
	else // conditional
	{
	//	REAL rr = dot(z, z);
		z += fractal->transformCommon.offset000;
		if (RR < fractal->mandelbox.foldingSphericalFixed)
		{
			//REAL mode = 0.0f;
			RR = fractal->mandelbox.foldingSphericalFixed;
			if (fractal->transformCommon.functionEnabledFalse) // Mode 1 minR0
			{
				if (RR < fractal->transformCommon.minR0) RR = fractal->transformCommon.minR0;
			}
			if (fractal->transformCommon.functionEnabledxFalse) // Mode 2
			{
				if (RR < fractal->transformCommon.minR0) RR = 2.0f * fractal->transformCommon.minR0 - RR;
			}
			RR = 1.0f / RR;
			z *= RR;
			aux->DE *= fabs(RR);
			z -= fractal->transformCommon.offset000;
		}
	}
	z -= fractal->mandelbox.offset + fractal->transformCommon.additionConstant000;
	if (fractal->analyticDE.enabledFalse)
	{
		aux->DE = aux->DE * fractal->analyticDE.scale1 + fractal->analyticDE.offset0;
	}

	if (fractal->foldColor.auxColorEnabledFalse)
	{
		aux->color += RR * fractal->transformCommon.scale0;
	}
	return z;
}
