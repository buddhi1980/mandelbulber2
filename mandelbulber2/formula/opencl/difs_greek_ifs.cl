/**
 * Mandelbulber v2, a 3D fractal generator  _%}}i*<.        ____                _______
 * Copyright (C) 2020 Mandelbulber Team   _>]|=||i=i<,     / __ \___  ___ ___  / ___/ /
 *                                        \><||i|=>>%)    / /_/ / _ \/ -_) _ \/ /__/ /__
 * This file is part of Mandelbulber.     )<=i=]=|=i<>    \____/ .__/\__/_//_/\___/____/
 * The project is licensed under GPLv3,   -<>>=|><|||`        /_/
 * see also COPYING file in this folder.    ~+{i%+++
 *
 * DIFSHextgrid2Iteration  fragmentarium code, mdifs by knighty (jan 2012)
 * and  darkbeams optimized verion @reference
 * http://www.fractalforums.com/mandelbulb-3d/custom-formulas-and-transforms-release-t17106/
 * "Beautiful iso-surface made of a hexagonal grid of tubes.
 * Taken from K3DSurf forum, posted by user abdelhamid belaid."

 * This file has been autogenerated by tools/populateUiInformation.php
 * from the file "fractal_difs_hextgrid2.cpp" in the folder formula/definition
 * D O    N O T    E D I T    T H I S    F I L E !
 */

REAL4 DIFSGreekIfsIteration(REAL4 z, __constant sFractalCl *fractal, sExtendedAuxCl *aux)
{
	REAL colorAdd = 0.0f;

	if (fractal->transformCommon.functionEnabledPFalse
			&& aux->i >= fractal->transformCommon.startIterationsP
			&& aux->i < fractal->transformCommon.stopIterationsP1)
	{
		if (fractal->transformCommon.functionEnabledBxFalse)
		{
			z.x = sign(z.x) * (fractal->transformCommon.offset000.x - fabs(z.x));
		}
		if (fractal->transformCommon.functionEnabledByFalse)
		{
			z.y = sign(z.y) * (fractal->transformCommon.offset000.y - fabs(z.y));
		}
		if (fractal->transformCommon.functionEnabledBzFalse)
		{
			z.z = sign(z.z) * (fractal->transformCommon.offset000.z - fabs(z.z));
		}
	}


	z *= fractal->transformCommon.scale1;
	aux->DE *= fractal->transformCommon.scale1;
	z += fractal->transformCommon.offsetA000;

	// z = fabs(z);
	REAL4 zc = z;
	if (!fractal->transformCommon.functionEnabledMFalse)
		zc.y = zc.y + sign(zc.x) * fractal->transformCommon.scale05 + fractal->transformCommon.offset0;
	else
		zc.y = zc.y + sign(zc.x) + fractal->transformCommon.offset0;

	if (!fractal->transformCommon.functionEnabledOFalse)
		zc.x = max(fabs(zc.x) + fractal->transformCommon.offset05,
			fabs(zc.y) + fractal->transformCommon.offsetA05);
	else
		zc.x = sqrt((zc.x * zc.x) + (zc.y * zc.y)); // circ

	REAL t = zc.x - round(zc.x);

	t = fabs(t) - fractal->transformCommon.offsetB0;

	if (!fractal->transformCommon.functionEnabledDFalse)
	{
		if (!fractal->transformCommon.functionEnabledEFalse)
			t = max(t, fabs(zc.z)) - fractal->transformCommon.offset02;
		else
		{
			REAL zz = (zc.z);
			if (fractal->transformCommon.functionEnabledFFalse) zz = fabs(zz);
			zz = (zz) - fractal->transformCommon.offsetC0;
			t = max(fabs(t) * SQRT_3_4_F + zz * 0.5f, -zz) - fractal->transformCommon.offset02;

		}

	}
	else
		t = sqrt(t * t + zc.z * zc.z) - fractal->transformCommon.offset02;

	REAL e = fractal->transformCommon.offset2;
	REAL d = fractal->transformCommon.offsetA2;

	REAL4 f = fabs(aux->const_c) - (REAL4){e, d, 0.0f, 0.0f};

	e = max(f.x, f.y); // sq
	t = max(e, t);


	REAL colDist = aux->dist;
	aux->dist = min(aux->dist, t / (aux->DE + fractal->analyticDE.offset1));

	if (fractal->foldColor.auxColorEnabledFalse && aux->i >= fractal->foldColor.startIterationsA
			&& aux->i < fractal->foldColor.stopIterationsA)
	{
		if (colDist != aux->dist) aux->color += fractal->foldColor.difs0000.x;

		if (fractal->foldColor.auxColorEnabledAFalse)
		{
			if (fractal->transformCommon.offsetA1 < fabs(zc.z))
				aux->color += fractal->foldColor.difs0000.y;
			//if (xyR <= -fractal->transformCommon.offsetp01) aux->color += fractal->foldColor.difs0000.z;
			//	if (fractal->transformCommon.offsetA1 - fractal->foldColor.difs0 < fabs(zc.z))
			//	aux->color += fractal->foldColor.difs0000.w;
		}
	}
	return z;
}
